/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode * head=NULL;
        if (lists.size()==0)   return head;
        if (lists.size()==1)
        {
            return lists[0];
        }
        
        head= lists[0];
        
        for (int i=1;i<lists.size();i++)
        {
            ListNode *p;
            ListNode * first=head;
            ListNode * second=lists[i];
            if (first==NULL)
            {
                head=lists[i];
                continue;
            }
            else if (second==NULL)
            {
                continue;
            }
            if (first->val >second->val)
            {
                p=second;
                head=p;
                
                second=second->next;
                p->next=nullptr;
            }
            else
            {
                p=first;
                head=p;
                first=first->next;
                p->next=nullptr;
            }
            while(first!=NULL && second!=NULL)
            {
                 if (first->val >second->val)
            {
                p->next=second;
                p=p->next;
                
                second=second->next;
                p->next=nullptr;
            }
            else
            {
                p->next=first;
                p=p->next;
                first=first->next;
                p->next=nullptr;
            }
                
            }
            if (first==NULL)
            {
                p->next=second;
            }
            else
            {
                p->next=first;
            }
            
        }
        return head;
    }
};
